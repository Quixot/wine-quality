# app/gradio_app.py

# –°—Ç—Ä–æ–∏—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≤–≤–æ–¥–æ–º 12 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Ö–æ—Ä–æ—à–µ–µ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ –≤–∏–Ω–æ
# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ python app/gradio_app.py

import gradio as gr
import joblib
import numpy as np

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ scaler
model = joblib.load("./models/rf_model.pkl")  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ rf_model.pkl –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
scaler = joblib.load("./models/scaler.pkl")

# –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
FEATURES = [
    'fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',
    'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',
    'pH', 'sulphates', 'alcohol', 'acid_ratio'
]

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def predict_wine(*args):
    values = np.array(args).reshape(1, -1)
    values_scaled = scaler.transform(values)
    prediction = model.predict(values_scaled)[0]
    return "–•–æ—Ä–æ—à–µ–µ üç∑" if prediction == 1 else "–û–±—ã—á–Ω–æ–µ üß™"

# Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
inputs = [gr.Number(label=feature) for feature in FEATURES]
demo = gr.Interface(fn=predict_wine, inputs=inputs, outputs="text", title="–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–Ω–∞")

if __name__ == "__main__":
    demo.launch()
