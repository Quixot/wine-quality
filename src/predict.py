# src/predict.py

# –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –∏ scaler
# –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "–•–æ—Ä–æ—à–µ–µ üç∑" –∏–ª–∏ "–û–±—ã—á–Ω–æ–µ üß™"

import numpy as np
import joblib
import pandas as pd

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ scaler
model = joblib.load("models/rf_model.pkl")  # –∏–ª–∏ rf_model.pkl, –µ—Å–ª–∏ –ª—É—á—à–∞—è - Random Forest
scaler = joblib.load("models/scaler.pkl")

# –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–∏–∑ features.py)
FEATURE_ORDER = [
    'fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',
    'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',
    'pH', 'sulphates', 'alcohol', 'acid_ratio'
]

def predict_single(input_dict: dict) -> str:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç '–•–æ—Ä–æ—à–µ–µ' –∏–ª–∏ '–û–±—ã—á–Ω–æ–µ'.
    """
    values = np.array([input_dict[feat] for feat in FEATURE_ORDER]).reshape(1, -1)
    values_scaled = scaler.transform(values)
    prediction = model.predict(values_scaled)[0]
    return "–•–æ—Ä–æ—à–µ–µ üç∑" if prediction == 1 else "–û–±—ã—á–Ω–æ–µ üß™"

if __name__ == "__main__":
    sample_input = {
        'fixed acidity': 7.4,
        'volatile acidity': 0.7,
        'citric acid': 0.0,
        'residual sugar': 1.9,
        'chlorides': 0.076,
        'free sulfur dioxide': 11.0,
        'total sulfur dioxide': 34.0,
        'density': 0.9978,
        'pH': 3.51,
        'sulphates': 0.56,
        'alcohol': 9.4,
        'acid_ratio': 7.4 / (0.7 + 1e-5)
    }

    result = predict_single(sample_input)
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:", result)
